name: Draft new release

on:
  workflow_dispatch:

jobs:
  draft-new-release:
    name: Draft a new release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/hotfix/')
    steps:
      - name: Checkout source branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      # In order to make a commit, we need to initialize a user.
      # You may choose to write something less generic here if you want, it doesn't matter functionality wise.
      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

      # Calculate the next release version based on conventional semantic release
      - name: Create release branch
        id: create-release
        env:
          HUSKY: 0
        run: |
          source_branch_name=${GITHUB_REF##*/}
          release_type=release
          grep -q "hotfix/" <<< "${GITHUB_REF}" && release_type=hotfix-release
          current_version=$(jq -r .version package.json)

          npx standard-version --skip.commit --skip.tag --skip.changelog
          new_version=$(jq -r .version package.json)
          git reset --hard

          branch_name="${release_type}/${new_version}"

          echo "Source branch for new release is $source_branch_name"
          echo "Current version is $current_version"
          echo "Release type is $release_type"
          echo "New version is $new_version"
          echo "New release branch name is $branch_name"
          git checkout -b "$branch_name"
          git push --set-upstream origin "$branch_name"

          echo "source_branch_name=$source_branch_name" >> $GITHUB_OUTPUT
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "CURRENT_VERSION_VALUE=$current_version" >> $GITHUB_ENV
          echo "NEW_VERSION_VALUE=$new_version" >> $GITHUB_ENV

      - name: Update changelog & bump version
        id: finish-release
        env:
          HUSKY: 0
        run: |
          echo "Current version: $CURRENT_VERSION_VALUE"
          echo "New version: $NEW_VERSION_VALUE"
          npx replace $CURRENT_VERSION_VALUE $NEW_VERSION_VALUE sonar-project.properties
          git add sonar-project.properties
          npx standard-version -a --skip.tag

      - name: Push new version in release branch & tag
        run: |
          git push

      - name: Create pull request into main
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          pr_title="chore(release): merge ${{ steps.create-release.outputs.branch_name }} into main"
          
          # Create PR body with proper formatting
          cat > pr_body.md << EOF
          :crown: **Automated Release PR**

          This pull request was created automatically by the GitHub Actions workflow. It merges the release branch (\`${{ steps.create-release.outputs.branch_name }}\`) into the \`main\` branch.

          This ensures that the latest release branch changes are incorporated into the \`main\` branch for production.

          ### Details
          - **Release Version**: v${{ env.NEW_VERSION_VALUE }}
          - **Release Branch**: \`${{ steps.create-release.outputs.branch_name }}\`

          ---
          Please review and merge when ready. :rocket:
          EOF
          
          # Create the PR using GitHub CLI
          gh pr create \
            --base main \
            --head ${{ steps.create-release.outputs.branch_name }} \
            --title "$pr_title" \
            --body-file pr_body.md
